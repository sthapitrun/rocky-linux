# Project 3: Creating A Load Balancer using Google Cloud CLI (Command Line Interface)

Basic #LoadBalancer understanding:
Dr. Burns - "A load balancer is a useful way to distribute traffic to multiple servers in order to reduce the workload on any one 
specific server. Load balancers can be used in all sorts of situations, such as managing email, web, or other internet traffic."

A load balancer acts as the “traffic cop” sitting in front of your servers and routing client requests across all 
servers capable of fulfilling those requests in a manner that maximizes speed and capacity utilization and ensures
that no one server is overworked, which could degrade performance. If a single server goes down, the load balancer
redirects traffic to the remaining online servers. When a new server is added to the server group, the load balancer 
automatically starts to send requests to it.

>> Maximize server throughput and minimize Latency
>> handle the requests by scaling the system

A single server has limited resources and limited throughput to accomodate requests from all clients. This may cause the server to overload and cause slowness and failure.

To handle this we typically scale the system: 
1. vertical scaling - increasing the power of server. 
 An increase in resources is limited.
2. horiztontal scaling - popular option
- Add more machines or servers to the system, three servers instead of one, a lot more requests can be handled from clients. 
- must ensure that requests are being processed by the server in a balanced way.

**Client >>>> Load Balancer >>>>> Server**

- Load Balancer is basically another server that sits between client and server to balance the load and requests from client to the servers. 
- Redirect clients requests to servers in balanced way
- Balance workloads
- Maintain even distribution 
- Main purpose is to redirect the requests in a balanced way so that none of the singles server is overloaded with requests from clients.

Horizontal scaling > add servers > load balancer will make use of new resources to improve the overall throughput > reduced latency

Reverse Proxy - Load balancers can also work on behalf of the clients or servers 
Not limited to clients or servers
LB can be setup in between 
Server >>>>> Database 
Server >>>>> other servers
DNS Load Balancer at the DNS layer of the website (e.g. dns query from browser will request the DNS LB to process the request and return the website)

Software load balancers - cheap and highly customizable

**Server Selection Strategy**
> ROUND ROBIN - goes through all the servers in a loop for even distribution of load amongst all servers
Customized Round Robin is called Weighted Round Robin where one powerful server is given more load and redirected to other servers
> Server Traffic - balancing load based on traffice being served by the server 
LB pings the server to check the health and based on server speed response and resources and decides if or not to redirect traffic to those servers
>IP Based - gets request from the clients and hashes # the ip address so specific server is serving a specific client
useful when servers are caching.

Based on need and situation
It is possible to use Multiple Load Balancers with different server selection strategies.

*PROXIES VS REVERSE PROXY*
> Proxy server - is the server acting as a gatekeeper between the private network and the public internet.
*Forward proxy server* - acts as a guardian/gatekeeper safeguarding the network by reguating traffic blocking harmful websites, masking client IP addresses, 
logging user activity, bypassing content restrictions and commonly used for web data collection. 
* Benefits of Forward proxy servers (to protect clients)
- Logs user activity
- logs what websites were visited by clients
- keeps track of what websites were visited and how long were they on those websites.
- bypass restricted contents. e.g. for schools and governments restrict some websites.
- improved speed by caching copies of websites frequently used. 

*Reverse Proxy* - regulates the traffic coming to the network. enhances security for servers by hiding their IP addresses, blocking malicious traffic, 
and implementing load balancing to distribute traffic evenly.
- creates a single POE to regulate incoming traffic to the servers.
* Benefits of Reverse proxy (to protect servers)
- increases the security on a private network by hiding IP addresses of the servers
- block malicious traffic such as DDOS attack. 
- where multiple servers are used, RP can act as load balancing to evenly distribute traffic to different servers to
reduce overwhelming traffic to one server causing slowness or failure. (traffic cop)

**Project 3: Creating a Load Balancer using Command Line Interface in GCP**
Purpose:
- Use the gcloud command line to create a load balancer that distributes web (HTTP) traffic to three separate servers.
- Create three servers that would contain the exact same content: our wordpress website created in Rocky Linux 8.
- Any requests to the website would be proxied through the load balancer, which would then, like a traffic cop, 
direct HTTP traffic to the servers, as needed.

# # # Steps (I took using CLI in macOS Monterey 12.6.8) # # #
# 1. Check the List of authorized users
gcloud auth list
                  Credentialed Accounts
ACTIVE  ACCOUNT
*       935733144260-compute@developer.gserviceaccount.com

To set the active account, run:
    $ gcloud config set account `ACCOUNT'

[core]
project = finalsys-gs
Your active configuration is: [default]

*Just a Note*
It is recommended to use service account but can authorize other login
*       935733144260-compute@developer.gserviceaccount.com
[bimalanemkul@rocky-2023 ~]$ gcloud auth login
and follow the instructions on the prompt.

You can run:
  $ gcloud config set account `ACCOUNT`
to switch accounts if necessary. But you may need to add another account if you want to use another account.
 - Check the authentication list
[bimalanemkul@rocky-2023 ~]$ gcloud auth list
-----------
    Save the project ID to a variable name PROJECT_ID by exporting the obtained project ID as an variable making it
    accessible to other commands and scripts
[bimalanemkul@rocky-2023 ~]$ export PROJECT_ID=$(gcloud config get-value project)

# 2. List the default zone and set the default zone
    Getting the default zone
[bimalanemkul@rocky-2023 ~]$ gcloud config list compute/zone
[compute]
zone (unset)

Your active configuration is: [default]
-----------
*Since the zone is (unset), modify and set the default zone. For me, its "us-central1-c"*
[bimalanemkul@rocky-2023 ~]$ gcloud config set compute/zone us-central1-c

# 3. List the Region and set the default Region
[bimalanemkul@rocky-2023 ~]$ gcloud config list compute/region
[compute]
region (unset)

Your active configuration is: [default]
---------
*Since the Region is (unset), modify and set the default Region. For me, its "us-central1-Iowa"*
[bimalanemkul@rocky-2023 ~]$ gcloud config set compute/region us-central1-Iowa
Check if the Region is updated,
[bimalanemkul@rocky-2023 ~]$ gcloud config list compute/region
[compute]
region = us-central1-Iowa

Your active configuration is: [default]

# 4. Create additional VM instance using CLI
We already have one VM named "rocky-2023". Create three other instances named "vweb01", "vweb02 and "vweb03"

*You may need authenticate your gmail account using ACCOUNT=your@gmail.com*
            $ gcloud config set account `ACCOUNT`  

**1st webserver: vweb01**
[bimalanemkul@rocky-2023 ~]$ gcloud compute instances create vweb01 --zone=us-central1-c --image-family=rocky-linux-8 --image-project=rocky-linux-cloud --tags=network-lb-tag --machine-type=e2-medium --metadata=startup-script='#!bin/bash 
dnf update -y
dnf install httpd -y
systemctl enable httpd
systemctl start httpd
echo "<h3>WebServer: vweb01</h3> | tee /var/www/html/index.html
'

Created [https://www.googleapis.com/compute/v1/projects/finalsys-gs/zones/us-central1-c/instances/vweb01].
NAME    ZONE           MACHINE_TYPE  PREEMPTIBLE  INTERNAL_IP  EXTERNAL_IP    STATUS
vweb01  us-central1-c  e2-medium                  10.128.0.5   34.30.120.120  RUNNING
[bimalanemkul@rocky-2023 ~]$ 

**2nd webserver: vweb02 (Note made this machine-type=e2-small)**
[bimalanemkul@rocky-2023 ~]$ gcloud compute instances create vweb02 --zone=us-central1-c --image-family=rocky-linux-8 --image-project=rocky-linux-cloud --tags=network-lb-tag --machine-type=e2-small --metadata=startup-script='#!bin/bash 
dnf update -y
dnf install httpd -y
systemctl enable httpd
systemctl start httpd
echo "<h3>WebServer: vweb01</h3> | tee /var/www/html/index.html
'

Created [https://www.googleapis.com/compute/v1/projects/finalsys-gs/zones/us-central1-c/instances/vweb02].
NAME    ZONE           MACHINE_TYPE  PREEMPTIBLE  INTERNAL_IP  EXTERNAL_IP  STATUS
vweb02  us-central1-c  e2-small                   10.128.0.6   34.71.62.93  RUNNING

**3rd webserver: vweb03 (Note made this machine-type=e2-small)**
[bimalanemkul@rocky-2023 ~]$ gcloud compute instances create vweb03 --zone=us-central1-c --image-family=rocky-linux-8 --image-project=rocky-linux-cloud --tags=network-lb-tag --machine-type=e2-small --metadata=startup-script='#!bin/bash 
dnf update -y
dnf install httpd -y
systemctl enable httpd
systemctl start httpd
echo "<h3>WebServer: vweb01</h3> | tee /var/www/html/index.html
'

Created [https://www.googleapis.com/compute/v1/projects/finalsys-gs/zones/us-central1-c/instances/vweb03].
NAME    ZONE           MACHINE_TYPE  PREEMPTIBLE  INTERNAL_IP  EXTERNAL_IP    STATUS
vweb03  us-central1-c  e2-small                   10.128.0.7   34.31.166.118  RUNNING

# 4. Create the Firewall rule to allow external traffic to our VM machine:
[bimalanemkul@rocky-2023 ~]$ gcloud compute firewall-rules create www-firewall-network-lb \
> --target-tags network-lb-tag --allow tcp:80
Creating firewall...⠹Created [https://www.googleapis.com/compute/v1/projects/finalsys-gs/global/firewalls/www-firewall-network-lb].
Creating firewall...done.                                                           
NAME                     NETWORK  DIRECTION  PRIORITY  ALLOW   DENY  DISABLED
www-firewall-network-lb  default  INGRESS    1000      tcp:80        False

# 5. Check the VM instances list (3 additional servers have been created):
[bimalanemkul@rocky-2023 ~]$ gcloud compute instances list
NAME        ZONE           MACHINE_TYPE  PREEMPTIBLE  INTERNAL_IP  EXTERNAL_IP     STATUS
rocky-2023  us-central1-c  e2-medium                  10.128.0.4   34.122.172.103  RUNNING
vweb01      us-central1-c  e2-medium                  10.128.0.5   34.30.120.120   RUNNING
vweb02      us-central1-c  e2-small                   10.128.0.6   34.71.62.93     RUNNING
vweb03      us-central1-c  e2-small                   10.128.0.7   34.31.166.118   RUNNING

# 6. Using Curl command to verify that each instance is running:
[bimalanemkul@rocky-2023 ~]$ curl http://10.128.0.4
[bimalanemkul@rocky-2023 ~]$ curl http://10.128.0.5
[bimalanemkul@rocky-2023 ~]$ curl http://10.128.0.6
[bimalanemkul@rocky-2023 ~]$ curl http://10.128.0.7

(Result shows the html content)

******Main Task: Configure the Load Balancing Server******
# 1. Creating a static external IP address for the load balancer:
*I have used region=us-central1 but it can be modified according to specific requirements*
  (we can check the GCloud regions list using command *gcloud compute regions list*)
  
[bimalanemkul@rocky-2023 ~]$ gcloud compute addresses create network-lb-ip-1 --region=us-central1
Created [https://www.googleapis.com/compute/v1/projects/finalsys-gs/regions/us-central1/addresses/network-lb-ip-1].














-----------









Footnote
UseFul Resources: (Google account)
https://www.cloudskillsboost.google/catalog_lab/1034
https://www.cloudskillsboost.google/course_sessions/6628477/labs/403395
https://www.youtube.com/watch?v=ZcNaOuxcuyA
https://www.youtube.com/watch?v=RXXRguaHZs0
https://www.nginx.com/resources/glossary/reverse-proxy-vs-load-balancer/

Special Thanks to UKY Professor Dr. Sean Burns for giving us the opportunity to get a hands on experience with Linux and other
areas of computing and technology. 
